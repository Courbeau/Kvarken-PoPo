<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Energy Optimizer — Simple</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
<style>
  :root{--bg:#0e0e0e;--card:#151515;--muted:#9aa0a6;--text:#f5f5f5;--accent:#4f46e5}
  *{box-sizing:border-box} body{margin:0;background:var(--bg);color:var(--text);font-family:Inter,system-ui,Segoe UI,Roboto,Arial,sans-serif}
  header{padding:20px;border-bottom:1px solid #232323}
  h1{margin:0;font-size:20px;font-weight:800}
  .wrap{max-width:1100px;margin:0 auto;padding:16px;display:grid;gap:12px;grid-template-columns:360px 1fr}
  .card{background:var(--card);border:1px solid #232323;border-radius:14px;padding:14px}
  label{display:block;font-size:12px;color:#cbd5e1;margin:8px 0 4px}
  input,select{width:100%;padding:9px 11px;border-radius:10px;border:1px solid #2c2c2c;background:#0f0f0f;color:#fff}
  .row{display:grid;grid-template-columns:1fr 1fr;gap:8px}
  .row3{display:grid;grid-template-columns:1fr 1fr 1fr;gap:8px}
  .btn{background:var(--accent);color:#fff;border:none;border-radius:10px;padding:9px 12px;font-weight:600;cursor:pointer}
  table{width:100%;border-collapse:collapse;margin-top:6px}
  th,td{padding:8px 6px;border-bottom:1px solid #232323;text-align:right;font-size:14px}
  th:first-child,td:first-child{text-align:left}
  .kpis{display:grid;grid-template-columns:1fr 1fr;gap:10px}
  .kpi{background:#0f0f0f;border:1px solid #232323;border-radius:10px;padding:10px}
  .kpi .val{font-size:18px;font-weight:800}
  .muted{color:var(--muted);font-size:12px;margin-top:4px}
  @media (max-width:980px){.wrap{grid-template-columns:1fr}}
  canvas{height:320px !important}
</style>
</head>
<body>
<header><h1>Energy Optimizer — Simple</h1></header>

<main class="wrap">
  <!-- Inputs -->
  <section class="card">
    <h2 style="margin:0 0 8px;font-size:14px;letter-spacing:.06em;text-transform:uppercase;color:#cbd5e1">Inputs</h2>

    <label>Horizon</label>
    <select id="horizon">
      <option value="24">24 h</option>
      <option value="168">7 d</option>
      <option value="720">30 d</option>
    </select>

    <div class="row">
      <div>
        <label>Engines (count)</label>
        <input id="engines" type="number" min="1" value="6" />
      </div>
      <div>
        <label>Max power per engine (MW)</label>
        <input id="pMax" type="number" step="0.1" min="0" value="8" />
      </div>
    </div>

    <div class="row">
      <div>
        <label>Base demand (MW)</label>
        <input id="baseDemand" type="number" step="0.1" value="30" />
      </div>
      <div>
        <label>Demand amplitude (MW)</label>
        <input id="ampDemand" type="number" step="0.1" value="12" />
      </div>
    </div>

    <label>Carbon price (€/tCO₂)</label>
    <input id="carbonPrice" type="number" step="1" value="85" />

    <label>Credit baseline</label>
    <select id="creditBaseline">
      <option value="diesel">Avoided vs Diesel</option>
      <option value="none">No credits</option>
    </select>

    <div class="card" style="margin-top:10px">
      <h3 style="margin:0 0 6px;font-size:13px;color:#cbd5e1;text-transform:uppercase">Hydrogen (H₂)</h3>
      <div class="row3">
        <div><label>Price (€/kg)</label><input id="h2Price" type="number" step="0.1" value="6" /></div>
        <div><label>LHV (MJ/kg)</label><input id="h2LHV" type="number" step="1" value="120" /></div>
        <div><label>Electric efficiency (%)</label><input id="h2Eff" type="number" step="0.1" value="45" /></div>
      </div>
      <label>Direct CO₂ factor (kg/MJ)</label>
      <input id="h2CO2" type="number" step="0.001" value="0" />
    </div>

    <div class="card" style="margin-top:10px">
      <h3 style="margin:0 0 6px;font-size:13px;color:#cbd5e1;text-transform:uppercase">Diesel</h3>
      <div class="row3">
        <div><label>Price (€/kg)</label><input id="dPrice" type="number" step="0.01" value="1.2" /></div>
        <div><label>LHV (MJ/kg)</label><input id="dLHV" type="number" step="0.1" value="43" /></div>
        <div><label>Electric efficiency (%)</label><input id="dEff" type="number" step="0.1" value="42" /></div>
      </div>
      <label>Direct CO₂ factor (kg/MJ)</label>
      <input id="dCO2" type="number" step="0.001" value="0.074" />
    </div>

    <div style="display:flex;gap:8px;margin-top:12px">
      <button class="btn" id="runBtn">Calculate</button>
      <button class="btn" style="background:#202124" id="seedBtn">New demand</button>
    </div>
    <p class="muted">Dispatch: each hour we meet demand (up to capacity) with the lower marginal cost (€/MWh). Credits accrue only to H₂ when baseline = Diesel.</p>
  </section>

  <!-- Output -->
  <section class="card">
    <h2 style="margin:0 0 8px;font-size:14px;letter-spacing:.06em;text-transform:uppercase;color:#cbd5e1">Demand & Forecast</h2>
    <div class="card" style="padding:10px"><canvas id="chart"></canvas></div>

    <div class="kpis" style="margin-top:10px">
      <div class="kpi"><div class="val" id="kpiEnergy">0 MWh</div><div class="muted">Energy generated</div></div>
      <div class="kpi"><div class="val" id="kpiEmissions">0 tCO₂</div><div class="muted">Direct emissions</div></div>
      <div class="kpi"><div class="val" id="kpiCreditsH2">€0</div><div class="muted">Carbon credits — H₂</div></div>
      <div class="kpi"><div class="val" id="kpiCreditsD">€0</div><div class="muted">Carbon credits — Diesel</div></div>
    </div>

    <div class="card" style="margin-top:10px">
      <h3 style="margin:0 0 6px;font-size:13px;color:#cbd5e1;text-transform:uppercase">Fuel comparison</h3>
      <table>
        <thead><tr><th>Metric</th><th>Hydrogen</th><th>Diesel</th></tr></thead>
        <tbody>
          <tr><td>Energy (MWh)</td><td id="h2E">0</td><td id="dE">0</td></tr>
          <tr><td>Fuel (kg)</td><td id="h2Kg">0</td><td id="dKg">0</td></tr>
          <tr><td>Fuel cost (€/MWh)</td><td id="h2Fuel">0.00</td><td id="dFuel">0.00</td></tr>
          <tr><td>Carbon cost (€/MWh)</td><td id="h2Carbon">0.00</td><td id="dCarbon">0.00</td></tr>
          <tr><td>Credits (€/MWh)</td><td id="h2Cred">0.00</td><td id="dCred">0.00</td></tr>
          <tr><td>Marginal cost (€/MWh)</td><td id="h2MC">0.00</td><td id="dMC">0.00</td></tr>
          <tr><td>Emissions (gCO₂/kWh)</td><td id="h2Int">0</td><td id="dInt">0</td></tr>
        </tbody>
      </table>
      <p class="muted">€/MWh values come directly from inputs and are comparable at a glance.</p>
    </div>
  </section>
</main>

<script>
(function(){
  // ------- Utilities -------
  let seed = 1;
  function rand(){ seed = (seed*9301 + 49297) % 233280; return seed/233280; }
  const el = id => document.getElementById(id);
  const fmtEUR = n => '€' + (n).toLocaleString(undefined,{maximumFractionDigits:0});
  const fmtMWh = n => (n).toLocaleString(undefined,{maximumFractionDigits:0}) + ' MWh';
  const fmtTons = n => (n).toLocaleString(undefined,{maximumFractionDigits:2}) + ' tCO₂';

  // ------- Inputs -------
  const inputs = {
    horizon: el('horizon'),
    engines: el('engines'), pMax: el('pMax'),
    baseDemand: el('baseDemand'), ampDemand: el('ampDemand'),
    carbonPrice: el('carbonPrice'), creditBaseline: el('creditBaseline'),
    h2Price: el('h2Price'), h2LHV: el('h2LHV'), h2Eff: el('h2Eff'), h2CO2: el('h2CO2'),
    dPrice: el('dPrice'), dLHV: el('dLHV'), dEff: el('dEff'), dCO2: el('dCO2')
  };

  // ------- Series: demand & forecast (sine) -------
  function genDemand(hours){
    const demand=[], forecast=[], labels=[];
    for(let t=0;t<hours;t++){
      const day = (t%24)/24;
      const base = Number(inputs.baseDemand.value);
      const amp  = Number(inputs.ampDemand.value);
      const f = base + amp*Math.sin(2*Math.PI*day); // pure sine forecast
      const d = f + (rand()-0.5)*2 + 2*Math.sin(2*Math.PI*((t%168)/168)); // forecast + noise + weekly seasonality
      demand.push(Math.max(0,d));
      forecast.push(Math.max(0,f));
      labels.push('t+'+t+'h');
    }
    return {demand, forecast, labels};
  }

  // ------- Physics/Economics -------
  const kgForMWh = (mwh, lhv, effPct) => (mwh*3600)/(lhv*(effPct/100));   // kg fuel / MWh_e
  const kgCO2FromFuel = (kgFuel, lhv, kgCO2perMJ) => kgFuel*lhv*kgCO2perMJ; // kgCO2

  function perMWh(f){
    const kgPerMWh = kgForMWh(1, f.lhv, f.eff);
    const fuelCost = kgPerMWh * f.price;
    const directKg = kgCO2FromFuel(kgPerMWh, f.lhv, f.co2);
    const carbonCost = (directKg/1000) * Number(inputs.carbonPrice.value);
    let credit = 0;
    if(inputs.creditBaseline.value==='diesel' && f.name==='Hydrogen'){
      const kgPerMWhDiesel = kgForMWh(1, Number(inputs.dLHV.value), Number(inputs.dEff.value));
      const dieselKg = kgCO2FromFuel(kgPerMWhDiesel, Number(inputs.dLHV.value), Number(inputs.dCO2.value));
      credit = Math.max(0, (dieselKg - directKg)/1000 * Number(inputs.carbonPrice.value));
    }
    const mc = fuelCost + carbonCost - credit;
    return {kgPerMWh, fuelCost, carbonCost, credit, mc, directKg};
  }

  // ------- Dispatch: meet demand with cheaper marginal cost -------
  function optimize(hours){
    const {demand, forecast, labels} = genDemand(hours);
    const capMW = Number(inputs.engines.value) * Number(inputs.pMax.value);

    const H2 = {name:'Hydrogen', price:+inputs.h2Price.value, lhv:+inputs.h2LHV.value, eff:+inputs.h2Eff.value, co2:+inputs.h2CO2.value};
    const D  = {name:'Diesel',   price:+inputs.dPrice.value,  lhv:+inputs.dLHV.value,  eff:+inputs.dEff.value,  co2:+inputs.dCO2.value};

    const cH2 = perMWh(H2), cD = perMWh(D);

    const out = {
      labels, demand, forecast, per:{H2:cH2, D:cD},
      eH2:0, eD:0, kgH2:0, kgD:0, creditsH2:0, creditsD:0, co2kg:0, energy:0
    };

    for(let t=0;t<hours;t++){
      const need = Math.min(demand[t], capMW); // MWh in the hour
      const useH2 = (cH2.mc <= cD.mc);
      const chosen = useH2 ? {c:cH2, f:H2} : {c:cD, f:D};

      const kg = kgForMWh(need, chosen.f.lhv, chosen.f.eff);
      const co2 = kgCO2FromFuel(kg, chosen.f.lhv, chosen.f.co2);
      const cred = useH2 ? (cH2.credit * need) : 0;

      out.energy += need;
      out.co2kg += co2;

      if(useH2){
        out.eH2 += need; out.kgH2 += kg; out.creditsH2 += cred;
      }else{
        out.eD  += need; out.kgD  += kg; out.creditsD  += 0;
      }
    }
    return out;
  }

  // ------- UI render -------
  let chart;
  function draw(res){
    // KPIs
    el('kpiEnergy').textContent = fmtMWh(res.energy);
    el('kpiEmissions').textContent = fmtTons(res.co2kg/1000);
    el('kpiCreditsH2').textContent = fmtEUR(res.creditsH2);
    el('kpiCreditsD').textContent  = fmtEUR(res.creditsD);

    // Fuel table
    el('h2E').textContent = res.eH2.toFixed(0);
    el('dE').textContent  = res.eD.toFixed(0);
    el('h2Kg').textContent = res.kgH2.toFixed(0);
    el('dKg').textContent  = res.kgD.toFixed(0);
    el('h2Fuel').textContent   = res.per.H2.fuelCost.toFixed(2);
    el('dFuel').textContent    = res.per.D.fuelCost.toFixed(2);
    el('h2Carbon').textContent = res.per.H2.carbonCost.toFixed(2);
    el('dCarbon').textContent  = res.per.D.carbonCost.toFixed(2);
    el('h2Cred').textContent   = res.per.H2.credit.toFixed(2);
    el('dCred').textContent    = res.per.D.credit.toFixed(2);
    el('h2MC').textContent     = res.per.H2.mc.toFixed(2);
    el('dMC').textContent      = res.per.D.mc.toFixed(2);
    const h2Int = (res.per.H2.directKg/1000)*1e6; // g/kWh
    const dInt  = (res.per.D.directKg/1000)*1e6;
    el('h2Int').textContent = h2Int.toFixed(0);
    el('dInt').textContent  = dInt.toFixed(0);

    // Chart: Demand vs Forecast (sine)
    if(chart){ chart.destroy(); }
    const ctx = document.getElementById('chart');
    chart = new Chart(ctx,{
      type:'line',
      data:{
        labels:res.labels,
        datasets:[
          {label:'Demand (MW)', data:res.demand, borderWidth:2, tension:0.25, fill:true},
          {label:'Forecast (MW)', data:res.forecast, borderWidth:2, borderDash:[6,6], tension:0.25}
        ]
      },
      options:{responsive:true,maintainAspectRatio:false,scales:{y:{title:{display:true,text:'MW'}}}}
    });
  }

  function run(){
    const hours = Number(inputs.horizon.value);
    const res = optimize(hours);
    draw(res);
  }

  // Events
  document.getElementById('runBtn').addEventListener('click', run);
  document.getElementById('seedBtn').addEventListener('click', ()=>{ seed = Math.floor(Math.random()*100000)+1; run(); });

  // Init
  run();
})();
</script>
</body>
</html>

